////////////////////////////////////////////////////////////////////////////////
// range ///////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function range(start, end, incrementer) {
    let array = [];
    if (incrementer !== undefined && incrementer > 0) {
      for (let i = start; i <= end; i += incrementer) {
        array.push(i);
      }
      return array;
  } else if (incrementer < 0) {
      return array;
    } else if (incrementer === undefined && start !== end) {
  for (let i = start; i <= end; i ++) {
    array.push(i);
    }
    return array;
  } else {
    return array;
  }}
////////////////////////////////////////////////////////////////////////////////
// sum /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function sum(array) {
let total = 0;
for(let value of array) {
  total += value;
} return total;
}

////////////////////////////////////////////////////////////////////////////////
// reverseArray ////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function reverseArray(array) {
let output = [];
for(let i = array.length -1; i >= 0; i--) {
  output.push(array[i]);
}return output;
}

////////////////////////////////////////////////////////////////////////////////
// reverseArrayInPlace /////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function reverseArrayInPlace(array) {
for(let i = 0; i < Math.floor(array.length / 2); i++) {
  let old = array[i];
  array[i] = array[array.length - 1 -i];
  array[array.length -1 -i] = old;
 }return array;
}

////////////////////////////////////////////////////////////////////////////////
// arrayToList /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function arrayToList(array) {
let list = null;
for(let i = array.length - 1; i >= 0; i--) {
  list = {value: array[i], rest: list}
}return list;
}

////////////////////////////////////////////////////////////////////////////////
// listToArray /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function listToArray(list) {
let array = [];
for(let node = list; node; node = node.rest) {
  array.push(node.value);
}return array;
}

////////////////////////////////////////////////////////////////////////////////
// prepend /////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function prepend(value, list) {
return {value, rest: list}
}

////////////////////////////////////////////////////////////////////////////////
// nth /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function nth(list, n) {
if(!list) return undefined;
else if (n === 0) return list.value;
else return nth(list.rest, n -1)
}

////////////////////////////////////////////////////////////////////////////////
// deepEqual ///////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

var deepEqual = function(x, y) {
  if(x ===y) {
    return true;
  }
  else if((typeof x == 'object' && x != null) && (typeof y == 'object' && y != null)) {
    if(Object.keys(x).length != Object.keys(y).length)
    return false;
    for(var prop in x) {
      if(y.hasOwnProperty(prop))
      {
        if(! deepEqual(x[prop], y[prop]))
        return false;
      }
      else 
      return false;
    }
    return true
  }
  else
  return false;
}
let obj = {here: {is: 'an'}, object: 2};

////////////////////////////////////////////////////////////////////////////////
// DON'T REMOVE THIS CODE //////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

if ((typeof process !== 'undefined') &&
  (typeof process.versions.node !== 'undefined')) {
  module.exports = {
    range,
    sum,
    reverseArray,
    reverseArrayInPlace,
    arrayToList,
    listToArray,
    prepend,
    nth,
    deepEqual,
  };
};
